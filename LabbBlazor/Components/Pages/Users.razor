@using System.Text.Json
@using System.Net.Sockets
@page "/users"
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>
<style>
    tr:hover.user-tr {
        background-color: lightgray;
    }
</style>

<h3>Current users</h3>
<p>(click user to see Todos)</p>

@if (_users.Count < 1 && _userDataErrorMessage == null)
{
    <p><em>Fetching User Information...</em></p>
}
else if (_userDataErrorMessage != null)
{
    <p>Could not load user data (@_userDataErrorMessage)</p>
}
else
{
    @if (_userIndexOutOfRangeMessage != null)
    {
        <p>_userIndexOftOfRangeMessage</p>
    }

    <InputSelect @bind-Value="_userFilter.SearchOption">
        <option value="@UserProperty.Name">Search by Name</option>
        <option value="@UserProperty.City">Search by City</option>
    </InputSelect>
    <input id="search" @bind-value="_userFilter.SearchTerm" @oninput=OnSearchInput />
    <br />

    <InputSelect @bind-Value="_userFilter.SortOption" @bind-Value:after=Sort>
        <option value="@UserProperty.Name">Sort by Name</option>
        <option value="@UserProperty.ID">Sort by ID</option>
    </InputSelect>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>City</th>
                <th>Street</th>
                <th>Zip Code</th>
                <th>Company</th>
                <th>Company Catchphrase</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in _filteredUsers)
            {
                <tr class="user-tr" @onclick="() => ShowToDos(user)" style="cursor: pointer;">
                    <td>@user.ID</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Address.City</td>
                    <td>@user.Address.Street</td>
                    <td>@user.Address.ZipCode</td>
                    <td>@user.Company.Name</td>
                    <td>@user.Company.CatchPhrase</td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" @onclick=ShowAll>Show All</button>
    <button type="button" @onclick=ShowLess>Show Less</button>
    <br />

    @if (_showToDos)
    {
        <Todos CurrentUser="_userWithShownTodos" DataAccess="_dataAccess"></Todos>
    }
}

@code {
    private IDataAccess? _dataAccess;
    private List<User> _users = new List<User>();
    private List<User> _filteredUsers = new List<User>();
    private UserCollectionFilterUtilities _userFilter = new UserCollectionFilterUtilities();

    private int _numberOfShownUsers;
    private string? _userDataErrorMessage;
    private string? _userIndexOutOfRangeMessage;
    private bool _showToDos = false;
    private User _userWithShownTodos = new User();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        await SetUserData();
        ShowLess();
    }
    private async Task SetUserData()
    {
        try
        {
            //_dataAccess = new SampleDataAccess();
            _dataAccess = new ApiDataAccess();

            var users = await _dataAccess.GetUsersAsync();
            _users = users.ToList();
            _userDataErrorMessage = null;
        }
        catch (DirectoryNotFoundException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
        catch (UnauthorizedAccessException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
        catch (FileNotFoundException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
        catch (IOException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
        catch (JsonException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
        catch (NotSupportedException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
        catch (SocketException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
        catch (HttpRequestException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
        catch (ArgumentNullException ex)
        {
            _userDataErrorMessage = ex.Message;
        }
    }
    private void ShowToDos(User user)
    {
        if (user == _userWithShownTodos)
        {
            _showToDos = (_showToDos) ? false : true;
        }
        else
        {
            _showToDos = true;
        }
        _userWithShownTodos = user;
    }
    private void ShowAll()
    {
        _numberOfShownUsers = (_users != null) ? _users.Count : 0;
        Filter();
    }
    public void ShowLess()
    {
        _numberOfShownUsers = 5;
        Filter();
    }
    public void Filter()
    {
        Search();
        Sort();
        if (_numberOfShownUsers < _filteredUsers.Count)
        {
            ShowNumberOfUsers();
        }
    }
    private void OnSearchInput(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            _userFilter.SearchTerm = e.Value.ToString() ?? string.Empty;
        }
        Filter();
    }
    private void ShowNumberOfUsers()
    {
        try
        {
            _filteredUsers = _filteredUsers.SelectUsersByAmount(_numberOfShownUsers);
            _userIndexOutOfRangeMessage = null;
        }
        catch (ArgumentOutOfRangeException e)
        {
            _userIndexOutOfRangeMessage = e.Message;
        }
    }
    private void Search() => _filteredUsers = _users.Search(_userFilter.SearchOption, _userFilter.SearchTerm);
    private void Sort() => _filteredUsers = _filteredUsers.Order(_userFilter.SortOption);
}
