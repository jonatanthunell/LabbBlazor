@page "/users"
@rendermode InteractiveServer
<h3>Users</h3>

@if (_users.Count < 1)
{
    <p><em>Fetching User Information...</em></p>
}
else
{
    @if (_userDataErrorMessage != null)
    {
        <p>Could not load user data (@_userDataErrorMessage)</p>
        <p>Please contact admin, displaying sample data</p>
    }

    <select @onchange="OnSortChanged">
        <option value="name">Sort by Name</option>
        <option value="id">Sort by ID</option>
    </select>

    <select @bind="_searchOption">
        <option value="name">Search by Name</option>
        <option value="city">Search by City</option>
    </select>

    <input id="search" @bind-value="_searchString" @oninput=OnSearchInput />

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>City</th>
                <th>Street</th>
                <th>Zip Code</th>
                <th>Company</th>
                <th>Company Catchphrase</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < _shownUsers; i++)
            {
                if (SearchUser(_users[i]))
                {
                    <tr>
                        <td>@_users[i].ID</td>
                        <td>@_users[i].Name</td>
                        <td>@_users[i].Email</td>
                        <td>@_users[i].Address.City</td>
                        <td>@_users[i].Address.Street</td>
                        <td>@_users[i].Address.ZipCode</td>
                        <td>@_users[i].Company.Name</td>
                        <td>@_users[i].Company.CatchPhrase</td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <button type="button" @onclick=ShowAllEventHandler>Show All</button>
}

@code {
    private List<User> _users = new List<User>();
    private IDataAccess? _dataAccess;
    private int _shownUsers = 0;
    private string _sortOption = "name";
    private string? _userDataErrorMessage;
    private string _searchString = string.Empty;
    private string _searchOption = "name";

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        SetUserData();
        SortUsers();
        _shownUsers = 5;
    }

    private void SetUserData()
    {
        try
        {
            _userDataErrorMessage = null;
            _dataAccess = new JSONDataAccess();
            _users = _dataAccess.GetUsers();
        }
        catch (AggregateException e)
        {
            _userDataErrorMessage = e.Message;
            _dataAccess = new SampleDataAccess();
            _users = _dataAccess.GetUsers();
        }
        catch (HttpRequestException e)
        {
            _userDataErrorMessage = e.Message;
            _dataAccess = new SampleDataAccess();
            _users = _dataAccess.GetUsers();
        }
    }

    private void ShowAllEventHandler()
    {
        _shownUsers = (_users != null) ? _users.Count : 0;
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        _sortOption = e.Value?.ToString() ?? _sortOption;
        SortUsers();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        _searchString = e.Value?.ToString() ?? _searchString;
    }


    private void SortUsers()
    {
        if (_sortOption == "id")
        {
            _users = _users.OrderBy(p => p.ID).ToList();
        }
        else if (_sortOption == "name")
        {
            _users = _users.OrderBy(p => p.Name).ToList();
        }
    }
    private bool SearchUser(User currentUser)
    {
        if (_searchOption == "name")
        {
            return currentUser.Name!.ToLower().Contains(_searchString.ToLower());
        }
        else if (_searchOption == "city")
        {
            return currentUser.Address.City!.ToLower().Contains(_searchString.ToLower());
        }
        return false;
    }
}
