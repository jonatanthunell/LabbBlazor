@page "/users"
@rendermode InteractiveServer
<h3>Users</h3>

@if (_users.Count < 1)
{
    <p><em>Fetching User Information...</em></p>
}
else
{
    @if (_userDataErrorMessage != null)
    {
        <p>Could not load user data (@_userDataErrorMessage)</p>
        <p>Please contact admin, displaying sample data</p>
    }

    <InputSelect @bind-Value="_sortAndSearcher.SearchOption">
        @foreach (var searchOption in Enum.GetValues(typeof(SearchOption)))
        {
            <option value="@searchOption">Search by @searchOption</option>
        }
    </InputSelect>

    <InputSelect @bind-Value="_sortAndSearcher.SortOption" @bind-Value:after=Sort>
        @foreach (var sortOption in Enum.GetValues(typeof(SortOption)))
        {
            <option value="@sortOption">Sort by @sortOption</option>
        }
    </InputSelect>

    <input id="search" @bind-value="_sortAndSearcher.SearchTerm" @oninput=OnSearchInput />

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>City</th>
                <th>Street</th>
                <th>Zip Code</th>
                <th>Company</th>
                <th>Company Catchphrase</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in _searchedSortedUsers)
            {
                <tr>
                    <td>@user.ID</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Address.City</td>
                    <td>@user.Address.Street</td>
                    <td>@user.Address.ZipCode</td>
                    <td>@user.Company.Name</td>
                    <td>@user.Company.CatchPhrase</td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" @onclick=ShowAllEventHandler>Show All</button>
}

@code {
    private List<User> _users = new List<User>();
    private List<User> _numberofUsers = new List<User>();
    private List<User> _searchedSortedUsers = new List<User>();
    private IDataAccess? _dataAccess;
    private SearchSort _sortAndSearcher = new SearchSort();
    private int _shownUsers;

    private string? _userDataErrorMessage;

    protected override void OnInitialized()
    {
        Task.Delay(1000);
        SetUserData();

        _shownUsers = 5;
        ShowNumberOfUsers();
        _searchedSortedUsers = _numberofUsers;
        _sortAndSearcher.SortOption = SortOption.Name;
        _sortAndSearcher.SearchOption = SearchOption.Name;
        OrderByName();

    }

    private void SetUserData()
    {
        try
        {
            _userDataErrorMessage = null;
            _dataAccess = new JSONDataAccess();
            _users = _dataAccess.GetUsers();
        }
        catch (AggregateException e)
        {
            _userDataErrorMessage = e.Message;
            _dataAccess = new SampleDataAccess();
            _users = _dataAccess.GetUsers();
        }
        catch (HttpRequestException e)
        {
            _userDataErrorMessage = e.Message;
            _dataAccess = new SampleDataAccess();
            _users = _dataAccess.GetUsers();
        }
    }

    private void ShowAllEventHandler()
    {
        _shownUsers = (_users != null) ? _users.Count : 0;
        ShowNumberOfUsers();
        Search();
    }
    private void ShowNumberOfUsers()
    {
        _numberofUsers = _users.FilterByAmount(_shownUsers);
    }
    private void OrderByName()
    {
        _searchedSortedUsers = _searchedSortedUsers.SortByName();
    }
    private void OrderById()
    {
        _searchedSortedUsers = _searchedSortedUsers.SortById();
    }
    private void SearchByName()
    {
        _searchedSortedUsers = _numberofUsers.SearchByName(_sortAndSearcher.SearchTerm);
    }
    private void SearchByCity()
    {
        _searchedSortedUsers = _numberofUsers.SearchByCity(_sortAndSearcher.SearchTerm);
    }
    private void OnSearchInput(ChangeEventArgs e)
    {
        _sortAndSearcher.SearchTerm = e.Value?.ToString() ?? string.Empty;
        Search();
        Sort();
    }
    private void Search()
    {
        switch (_sortAndSearcher.SearchOption)
        {
            case SearchOption.Name: SearchByName(); break;
            case SearchOption.City: SearchByCity(); break;
        }
    }
    private void Sort()
    {
        switch (_sortAndSearcher.SortOption)
        {
            case SortOption.Name: OrderByName(); break;
            case SortOption.ID: OrderById(); break;
        }
    }
    public enum SearchOption
    {
        Name,
        City
    }
    public enum SortOption
    {
        Name,
        ID
    }
    public class SearchSort
    {
        public SortOption SortOption { get; set; }
        public SearchOption SearchOption { get; set; }
        public string SearchTerm { get; set; }
        public SearchSort()
        {
            SearchTerm = string.Empty;
        }
    }

}
