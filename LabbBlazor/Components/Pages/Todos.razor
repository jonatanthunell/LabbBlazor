@page "/todos"
@rendermode InteractiveServer

@if(CurrentUser != null)
{
    <h3>Todos for user @CurrentUser.ID: @CurrentUser.Name</h3>
}

<InputCheckbox @bind-Value="_onlyShowIncompletedTodos" @bind-Value:after=Filter></InputCheckbox>
Only show incompleted<br />
<InputText @bind-Value="_seachTerm" @oninput=OnSearchInput></InputText>
Search for task<br />

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Completed</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todo in _currentUserTodosFiltered)
        {
            <tr>
                <td>@todo.Id</td>
                <td>@todo.Title</td>
                <td>@todo.Completed</td>
            </tr>
        }
    </tbody>
</table>
@code {
    [Parameter]
    public User? CurrentUser { get; set; }

    private JSONDataAccess _dataAccess = new JSONDataAccess();
    private List<ToDo> _currentUserTodos = new List<ToDo>();
    private List<ToDo> _currentUserTodosFiltered = new List<ToDo>();
    private bool _onlyShowIncompletedTodos = false;
    private string _seachTerm = string.Empty;

    protected override void OnParametersSet()
    {
        if(CurrentUser != null)
        {
            _currentUserTodos = _dataAccess.GetToDos().GetSpecificUserTodos(CurrentUser.ID);
            Filter();
        }
    }
    private void OnSearchInput(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            _seachTerm = e.Value.ToString() ?? string.Empty;
        }
        Filter();
    }
    private void Filter()
    {
        Search();
        if (_onlyShowIncompletedTodos)
        {
            ShowIncompletedTodos();
        }
    }
    private void Search()
    {
        _currentUserTodosFiltered = _currentUserTodos.Where(x => x.Title.ToLower().Contains(_seachTerm.Trim().ToLower())).ToList();
    }
    private void ShowIncompletedTodos()
    {
        _currentUserTodosFiltered = _currentUserTodosFiltered.Where(x => !x.Completed).ToList();
    }
}
